# Auto-generated by tools/gen_tests.py â€” DO NOT EDIT BY HAND

from pathlib import Path
import importlib.util, json

ROOT = Path(__file__).resolve().parents[1]
FORM_DIR = ROOT / "forms" / "vollmacht"

def _load_module(py_path: Path):
    spec = importlib.util.spec_from_file_location(py_path.stem, py_path)
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)  # type: ignore
    return mod

def _load_json(p: Path, default=None):
    try:
        return json.loads(p.read_text(encoding="utf-8"))
    except FileNotFoundError:
        return default if default is not None else {}

def _build_sample_values(schema: dict) -> dict:
    vals = {'vg_name': 'Test vg-name', 'vg_vorname': 'Test vg-vorname', 'vg_geb': '01.01.1990', 'vg_addr': 'Lorem ipsum dolor sit amet. (auto)', 'b_name': 'Test b-name', 'b_vorname': 'Test b-vorname', 'b_geb': '01.01.1990', 'b_addr': 'Lorem ipsum dolor sit amet. (auto)', 'stadt': 'Berlin', 'datum': '01.08.2025'}
    # augment convenience keys like vg_*, b_*, person_*
    def _augment(vals):
        # vollmacht
        for k in ["name","vorname","geb","addr"]:
            if f"vg_{k}" not in vals and f"vg_{k}" in vals:  # no-op
                pass
        # copy helper
        def _copy(prefix, keys):
            for kk in keys:
                src = f"{prefix}_{kk}"
                if src in vals:
                    vals[src] = vals[src]
        # done in outer generator; keep stub
        return vals
    return vals

def test_build_pdf_vollmacht():
    builder_py = FORM_DIR / "builder.py"
    assert builder_py.exists(), "builder.py missing"

    builder = _load_module(builder_py)
    schema = _load_json(FORM_DIR / "schema.json", {})
    i18n = _load_json(FORM_DIR / "i18n.de.json", {})
    cfg = _load_json(ROOT / "setup-config.json", {})
    pdf_opts = (cfg.get("pdf_options") or {}).copy()

    # sample data
    data = _build_sample_values(schema)
    # add convenience keys that some builders expect
    # (vollmacht vg_*/b_*, obdachlosigkeit person_*)
    for prefix, keys in [("vg", ["name","vorname","geb","addr"]),
                         ("b", ["name","vorname","geb","addr"]),
                         ("person", ["name","geb","has_relatives","relatives_text"])]:
        for k in keys:
            sk = f"{prefix}_{k}"
            if sk not in data and f"{prefix}_{k}" in data:
                pass  # already handled by generator
            # if only section_field format exists, copy it
            alt = f"{prefix}_{k}"
            if alt in data:
                data[sk] = data[alt]

    pdf_bytes = builder.build_pdf(
        data=data,
        i18n=i18n or {},
        pdf_options=pdf_opts,
        signature_bytes=None,
    )
    assert isinstance(pdf_bytes, (bytes, bytearray)) and len(pdf_bytes) > 1000, "PDF seems empty"
    assert pdf_bytes[:4] == b"%PDF", "Not a valid PDF header"
