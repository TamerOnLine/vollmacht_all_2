# tools/gen_tests.py
import json, re
from pathlib import Path
from textwrap import dedent

ROOT = Path(__file__).resolve().parents[1]
FORMS_DIR = ROOT / "forms"
TESTS_DIR = ROOT / "tests"

HEADER = "# Auto-generated by tools/gen_tests.py — DO NOT EDIT BY HAND\n"

def load_json(p: Path, default=None):
    try:
        return json.loads(p.read_text(encoding="utf-8"))
    except FileNotFoundError:
        return default if default is not None else {}

def snake(s: str) -> str:
    return re.sub(r"[^a-z0-9]+", "_", s.lower()).strip("_")

def build_sample_values(schema: dict) -> dict:
    """يولّد قاموس قيم على شكل section_field = value بناءً على أنواع الحقول."""
    vals: dict[str, object] = {}
    for sec in schema.get("sections", []):
        s_key = sec.get("key", "")
        for fld in sec.get("fields", []):
            f_key = fld.get("key", "")
            f_type = fld.get("type", "text")
            k = f"{s_key}_{f_key}"
            if f_type == "checkbox":
                vals[k] = True  # نفعل الخيار لاختبار الـ X
            elif f_type == "textarea":
                vals[k] = "Lorem ipsum dolor sit amet. (auto)"
            else:
                # محاولات تلقائية لأسماء شائعة
                low = f"{s_key}.{f_key}".lower()
                if "geb" in low or "date" in low:
                    vals[k] = "01.01.1990"
                elif "name" in low:
                    vals[k] = f"Test {s_key}-{f_key}"
                elif "addr" in low or "anschrift" in low or "adresse" in low:
                    vals[k] = "Musterstraße 1, 10115 Berlin"
                else:
                    vals[k] = f"Test {s_key}-{f_key}"
    # إضافات عامة أسفل الصفحة
    vals["stadt"] = "Berlin"
    vals["datum"] = "01.08.2025"
    return vals

def augment_convenience_keys(vals: dict):
    """ينسخ القيم إلى المفاتيح المختصرة التي تتوقعها بعض الـ builders."""
    def copy_prefix(prefix: str, keys: list[str]):
        for k in keys:
            src = f"{prefix}_{k}"
            if src in vals:
                vals[f"{prefix}{'_' if prefix else ''}{k}"] = vals[src]
    # vollmacht: vg_*, b_*
    copy_prefix("vg", ["name", "vorname", "geb", "addr"])
    copy_prefix("b", ["name", "vorname", "geb", "addr"])
    # obdachlosigkeit: person_*
    copy_prefix("person", ["name", "geb", "has_relatives", "relatives_text"])
    # بدائل شائعة
    if "person_has_relatives" not in vals and "person_has_relatives_checked" in vals:
        vals["person_has_relatives"] = vals["person_has_relatives_checked"]

def make_test_content(form_key: str, schema: dict) -> str:
    content = dedent(f"""
    {HEADER}
    from pathlib import Path
    import importlib.util, json

    ROOT = Path(__file__).resolve().parents[1]
    FORM_DIR = ROOT / "forms" / "{form_key}"

    def _load_module(py_path: Path):
        spec = importlib.util.spec_from_file_location(py_path.stem, py_path)
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)  # type: ignore
        return mod

    def _load_json(p: Path, default=None):
        try:
            return json.loads(p.read_text(encoding="utf-8"))
        except FileNotFoundError:
            return default if default is not None else {{}}

    def _build_sample_values(schema: dict) -> dict:
        vals = {build_sample_values(schema)}
        # augment convenience keys like vg_*, b_*, person_*
        def _augment(vals):
            # vollmacht
            for k in ["name","vorname","geb","addr"]:
                if f"vg_{{k}}" not in vals and f"vg_{{k}}" in vals:  # no-op
                    pass
            # copy helper
            def _copy(prefix, keys):
                for kk in keys:
                    src = f"{{prefix}}_{{kk}}"
                    if src in vals:
                        vals[src] = vals[src]
            # done in outer generator; keep stub
            return vals
        return vals

    def test_build_pdf_{snake(form_key)}():
        builder_py = FORM_DIR / "builder.py"
        assert builder_py.exists(), "builder.py missing"

        builder = _load_module(builder_py)
        schema = _load_json(FORM_DIR / "schema.json", {{}})
        i18n = _load_json(FORM_DIR / "i18n.de.json", {{}})
        cfg = _load_json(ROOT / "setup-config.json", {{}})
        pdf_opts = (cfg.get("pdf_options") or {{}}).copy()

        # sample data
        data = _build_sample_values(schema)
        # add convenience keys that some builders expect
        # (vollmacht vg_*/b_*, obdachlosigkeit person_*)
        for prefix, keys in [("vg", ["name","vorname","geb","addr"]),
                             ("b", ["name","vorname","geb","addr"]),
                             ("person", ["name","geb","has_relatives","relatives_text"])]:
            for k in keys:
                sk = f"{{prefix}}_{{k}}"
                if sk not in data and f"{{prefix}}_{{k}}" in data:
                    pass  # already handled by generator
                # if only section_field format exists, copy it
                alt = f"{{prefix}}_{{k}}"
                if alt in data:
                    data[sk] = data[alt]

        pdf_bytes = builder.build_pdf(
            data=data,
            i18n=i18n or {{}},
            pdf_options=pdf_opts,
            signature_bytes=None,
        )
        assert isinstance(pdf_bytes, (bytes, bytearray)) and len(pdf_bytes) > 1000, "PDF seems empty"
        assert pdf_bytes[:4] == b"%PDF", "Not a valid PDF header"
    """).lstrip()
    return content

def main():
    TESTS_DIR.mkdir(parents=True, exist_ok=True)
    created = 0

    for d in sorted(p for p in FORMS_DIR.iterdir() if p.is_dir()):
        key = d.name
        if not (d / "builder.py").exists() or not (d / "schema.json").exists():
            continue
        out = TESTS_DIR / f"test_{snake(key)}.py"
        schema = load_json(d / "schema.json", {})
        out.write_text(make_test_content(key, schema), encoding="utf-8")
        created += 1
        print(f"[ok] wrote {out.relative_to(ROOT)}")

    if created == 0:
        print("No forms found to generate tests for.")
    else:
        init = TESTS_DIR / "__init__.py"
        if not init.exists():
            init.write_text(HEADER, encoding="utf-8")
        print(f"\nDone. Generated {created} test file(s).")

if __name__ == "__main__":
    main()
